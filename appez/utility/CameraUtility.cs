using appez.constants;
using appez.exceptions;
using appez.listeners;
using appez.model;
using appez.model.camera;
using Microsoft.Phone.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.IO;
using System.IO.IsolatedStorage;
using System.Windows;

namespace appez.utility
{
    /// <summary>
    /// Utility for camera and gallery operation.
    /// </summary>
    public class CameraUtility
    {
        #region variables
        CameraCaptureTask cameraTask = null;
        PhotoChooserTask photoChooserTask = null;
        ImageUtility imageUtil = null;
        private SmartCameraListener smartCameraListener = null;
        CameraConfigInformation cameraConfiginformation = null;
        IsolatedStorageSettings settings = IsolatedStorageSettings.ApplicationSettings;
        #endregion

        /// <summary>
        /// Initiate CameraUtility class.
        /// </summary>
        /// <param name="listener"></param>
        public CameraUtility(SmartCameraListener listener)
        {
            this.smartCameraListener = listener;
            //Create new CameraCaptureTask and register completed event.
            cameraTask = new CameraCaptureTask();
            cameraTask.Completed += new EventHandler<PhotoResult>(CameraTask_Completed);

            //Create new PhotoChooserTask and register completed event.
            photoChooserTask = new PhotoChooserTask();
            photoChooserTask.Completed += new EventHandler<PhotoResult>(PhotoChooserTask_Completed);

            // Create new instance of ImageUtility.
            imageUtil = new ImageUtility();

            InitializeSettings();
        }
        /// <summary>
        /// Initialize image count variable in isolated storage.
        /// </summary>
        private void InitializeSettings()
        {
            if (!settings.Contains("imageCount"))
            {
                settings.Add("imageCount", 1);
            }

        }

        /// <summary>
        /// Launches Camera task.
        /// </summary>
        /// <param name="cameraConfig">Camera Configuration Information</param>
        public void LaunchCamera(CameraConfigInformation cameraConfig )
        {
            this.cameraConfiginformation = cameraConfig;
            cameraTask.Show();
        }

        /// <summary>
        /// Launches Gallary task.
        /// </summary>
        /// <param name="cameraConfig">Camera Configuration Information</param>
        public void LaunchGallery(CameraConfigInformation cameraConfig)
        {
            this.cameraConfiginformation = cameraConfig;
            photoChooserTask.Show();
        }

        /// <summary>
        /// Handles gallary task complete event and process image.
        /// </summary>
        /// <param name="sender">Gallary object</param>
        /// <param name="e">PhotoResult</param>
        private void PhotoChooserTask_Completed(object sender, PhotoResult e)
        {
            // Check for success
            if (e.TaskResult == TaskResult.OK)
            {
                // Get image name generated by phone.
                string imageFileName = Path.GetFileNameWithoutExtension(e.OriginalFileName);
                Stream imageStream = e.ChosenPhoto;

                // Process image for Monochrome, sepia and quality reduction.
                byte[] responseData = imageUtil.ProcessImage(e.ChosenPhoto, cameraConfiginformation);

                // Check for data return method.
                if (cameraConfiginformation.imageReturnType == SmartConstants.IMAGE_DATA)
                {
                    Deployment.Current.Dispatcher.BeginInvoke(() =>
                    {
                        // Return image as byte[].
                        this.smartCameraListener.OnSuccessCameraOperation(PrepareImageSuccessResponse(null, Convert.ToBase64String(responseData), this.cameraConfiginformation.imageEncoding, true));
                    });
                }
                else if (cameraConfiginformation.imageReturnType == SmartConstants.IMAGE_URL)
                {
                    string filePath;
                    // Get application storage folder.
                    using (var isoFile = IsolatedStorageFile.GetUserStoreForApplication())
                    {
                        // Create folder if not exist.
                        if (!isoFile.DirectoryExists(SmartConstants.ISO_FOLDER))
                        {
                            isoFile.CreateDirectory(SmartConstants.ISO_FOLDER);
                        }
                        int imageCount = (int)settings["imageCount"];
                        settings["imageCount"] = ++imageCount;
                        // combine file path.
                        filePath = System.IO.Path.Combine("///" + SmartConstants.ISO_FOLDER + "/", imageFileName + imageCount + ".jpg");

                        if (isoFile.AvailableFreeSpace > responseData.Length)
                        {
                            // Write byte[] into file stream.
                            using (var stream = isoFile.CreateFile(filePath))
                            {
                                try
                                {
                                    stream.Write(responseData, 0, responseData.Length);
                                }
                                catch (OutOfMemoryException)
                                {
                                    throw new MobiletException(ExceptionTypes.MEMORY_NOT_AVAILABLE);
                                }
                                catch (IsolatedStorageException)
                                {
                                    throw new MobiletException(ExceptionTypes.SPACE_NOT_AVAILABLE);
                                }
                            }
                        }
                        else
                        {
                            throw new MobiletException(ExceptionTypes.SPACE_NOT_AVAILABLE);
                        }
                    }
                    imageUtil = null;

                    Deployment.Current.Dispatcher.BeginInvoke(() =>
                    {
                        // Return file location as response data.
                        this.smartCameraListener.OnSuccessCameraOperation(PrepareImageSuccessResponse(new Uri(filePath, UriKind.Relative).ToString(), null, this.cameraConfiginformation.imageEncoding, true));
                    });
                }
            }
            else
            {
                Deployment.Current.Dispatcher.BeginInvoke(() =>
                {
                    // Return file location as response data.
                    this.smartCameraListener.OnErrorCameraOperation(ExceptionTypes.UNKNOWN_EXCEPTION,"");
                });
            }

        }

        /// <summary>
        /// Handles camera task complete event and process image.
        /// </summary>
        /// <param name="sender">Camera object</param>
        /// <param name="e">PhotoResult</param>
        private void CameraTask_Completed(object sender, PhotoResult e)
        {
            // Check for success
            if (e.TaskResult == TaskResult.OK)
            {
                // Get image name generated by phone.
                string imageFileName = Path.GetFileNameWithoutExtension(e.OriginalFileName);
                Stream imageStream = e.ChosenPhoto;

                // Process image for Monochrome, sepia and quality reduction.
                byte[] responseData = imageUtil.ProcessImage(e.ChosenPhoto, cameraConfiginformation);

                // Check for data return method.
                if (cameraConfiginformation.imageReturnType == SmartConstants.IMAGE_DATA)
                {
                    Deployment.Current.Dispatcher.BeginInvoke(() =>
                    {
                        // Return image as byte[].
                        this.smartCameraListener.OnSuccessCameraOperation(PrepareImageSuccessResponse(null, Convert.ToBase64String(responseData), this.cameraConfiginformation.imageEncoding, true));
                    });
                }
                else if (cameraConfiginformation.imageReturnType == SmartConstants.IMAGE_URL)
                {
                    string filePath;
                    // Get application storage folder.
                    using (var isoFile = IsolatedStorageFile.GetUserStoreForApplication())
                    {
                        // Create folder if not exist.
                        if (!isoFile.DirectoryExists(SmartConstants.ISO_FOLDER))
                        {
                            isoFile.CreateDirectory(SmartConstants.ISO_FOLDER);
                        }
                        // combine file path.
                        filePath = System.IO.Path.Combine("///" + SmartConstants.ISO_FOLDER + "/", imageFileName + ".jpg");
                        if (isoFile.AvailableFreeSpace > responseData.Length)
                        {
                            // Write byte[] into file stream.
                            using (var stream = isoFile.CreateFile(filePath))
                            {
                                try
                                {
                                    stream.Write(responseData, 0, responseData.Length);
                                }
                                catch (OutOfMemoryException)
                                {
                                    throw new MobiletException(ExceptionTypes.MEMORY_NOT_AVAILABLE);
                                }
                                catch (IsolatedStorageException)
                                {
                                    throw new MobiletException(ExceptionTypes.SPACE_NOT_AVAILABLE);
                                }
                            }
                        }
                        else
                        {
                            throw new MobiletException(ExceptionTypes.SPACE_NOT_AVAILABLE);
                        }
                    }
                    imageUtil = null;
                    Deployment.Current.Dispatcher.BeginInvoke(() =>
                    {
                        // Return file location as response data.
                        this.smartCameraListener.OnSuccessCameraOperation(PrepareImageSuccessResponse(new Uri(filePath, UriKind.Relative).ToString(), null, this.cameraConfiginformation.imageEncoding, true));
                    });
                }
            }
            else
            {
                Deployment.Current.Dispatcher.BeginInvoke(() =>
                {
                    // Return file location as response data.
                    this.smartCameraListener.OnErrorCameraOperation(ExceptionTypes.UNKNOWN_EXCEPTION, "");
                });
            }
        }

        

        /// <summary>
        /// Prepares JSON image response based on the successful completion of image
	    /// operation
        /// </summary>
        /// <param name="imagePath">Absolute path of the image in the storage where the user
	    ///            captured image is stored. This value is non-null if user
	    ///            chooses to receive the image as saved image in the
	    ///            external/internal storage</param>
        /// <param name="imageData">Base64 encoded image data. This value is non-null if user
	    ///            chooses to receive the image as Base64 encoded data</param>
        /// <param name="imageFormatToSave">If the image is saved in the storage, then this parameter
	    ///            indicates the format in which the image was saved. Can be one
	    ///            of JPEG or PNG</param>
        /// <param name="isOperationSuccessful">Indicated successful operation.</param>
        /// <returns>JSON string containing image data</returns>
        public static String PrepareImageSuccessResponse(String imagePath, String imageData, String imageFormatToSave, bool isOperationSuccessful)
        {
            String imageResponse = null;
            try
            {
                JObject response = new JObject();
                response.Add(CommMessageConstants.MMI_RESPONSE_PROP_IMAGE_URL, imagePath);
                response.Add(CommMessageConstants.MMI_RESPONSE_PROP_IMAGE_DATA, imageData);
                response.Add(CommMessageConstants.MMI_RESPONSE_PROP_IMAGE_TYPE, imageFormatToSave);
                response.Add(CommMessageConstants.MMI_RESPONSE_PROP_IS_CAMERA_OPERATION_SUCCESSFUL, isOperationSuccessful);
                imageResponse = response.ToString();
            }
            catch (JsonException)
            {
                throw new MobiletException(ExceptionTypes.JSON_PARSE_EXCEPTION);
            }

            return imageResponse;
        }

    }
}
